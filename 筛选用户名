某天，蒜头君发现计蒜客上的用户名好多都长一样，蒜头君看着差点看晕了。为了区分用户名，蒜头君打算好好地清理清理。
他将筛选出用户名一样的用户信息，然后给这些用户发邮件，提醒他们改一改用户名。需要注意的是，蒜头君不分大小写字母，
所以他认为两个长度相等，每个字符对应一样的用户名是一样的，例如他认为用户名jisuanke和JiSuanKe是一样的。

现在蒜头君手里有 NN 个用户名，他想知道哪些用户名是重复的。
蒜头君按从前往后的顺序依次查看，如果用户名在前面出现过则输出Yes，否则输出No。
现在蒜头君想请你帮他完成这项艰巨的任务，聪明的你能帮他完成吗？

输入格式
输入第一行是一个正整数 N(1≤N≤100000)，表示一共有 N 个用户名。
接下来有 N 行，每一行是一个用户名，长度不超过 100，均由大写字母和小写字母组成。

输出格式
请按照输入顺序输出，如果用户名在前面出现过则输出Yes，否则输出No，一行输出一个。

//错误版本——运行超时 
#include<iostream>
#include<cstring>
#include<vector>
using namespace std;
int main()
{
	int n,i,j,flag;
	flag=1;
	cin>>n;
	vector <string> s(20000);
	//string* s=new string[n];
	for(i=0;i<n;i++)
	{
		cin>>s[i];
	}
	for(i=0;i<n;i++)
	{
		for(j=0;j<s[i].length();j++)
		{
			if(s[i][j]>='A'&&s[i][j]<='Z')
			{
				s[i][j]=char(s[i][j]+32);
			}
		}
	}
	cout<<"No"<<endl;
	for(i=1;i<n;i++)
	{
		flag=1;
		for(j=0;j<i;j++)
		{
			if(s[i]==s[j])
			{
				cout<<"Yes"<<endl;
				flag=0;
				break;
			}
		}
		if(flag) 
		cout<<"No"<<endl;
	}
}

//改进版本——根据用户名长度筛去不必要的比较 ，建立一个链表数组 
#include<iostream>
#include<string>
#include<algorithm>
using namespace std;
struct node
{
	int order;    //位置 
	string name;
	node*next;
};
int main()
{
	int n,i;
	cin>>n;
	string* s=new string[n];
	string* k=new string[n];
	//node* p=new node[101];
	node* p[101];
	for(i=1;i<=100;i++)
	{
		p[i]=NULL;   //数组初始化
	}
	//把名字放入数组相应位置 
	for(i=0;i<n;i++)
	{
		cin>>s[i]; 
		//transform(s[i].begin(),s[i].end(),s[i].begin(),tolower);
		transform(s[i].begin(),s[i].end(),s[i].begin(),::tolower);
		//node* t;
		node* t=new node;
		t->order=i;
		t->name=s[i];
		if(p[s[i].size()]==NULL)
		{
			//p[i]=t;
			p[s[i].size()]=t;
			t->next=NULL;
		}
		else 
		{
			t->next=p[s[i].size()];   //将长度相同的名字插到表头
			p[s[i].size()]=t;   //更新表头； 
		}
	}
	//判断之前有无相同名字 
	for(i=1;i<=100;i++)   //每组（同一种长度）名字都要查找 
	{
		node* temp=p[i];
		while(temp)
		{
			string str=temp->name;
			node* heap=temp->next;
			while(heap)
			{
				if(heap->name==str)
				{
					k[temp->order]="Yes";
					break;
				}
				heap=heap->next;   //该名字前面的每一个都要查找并比对 
			}
			if(k[temp->order]!="Yes")
				k[temp->order]="No";
			temp=temp->next;    //每组中的每一个名字都要和前面的进行比对 
		}
	}
	for(i=0;i<n;i++)
	{
		cout<<k[i]<<endl;
	}
}
