/* 
某小学举办了一场校内的信息学竞赛选拔赛。现在同学们的成绩都出来了，负责信息学竞赛的老师需要确定最终选拔赛的获奖名单。

为了鼓励大家，老师希望获奖人数不少于参赛总人数的一半。因此，老师需要确定一个获奖分数线，所有得分在分数线及以上的同学可以获奖。

在满足上面条件的情况下，老师希望获奖分数线越高越好。

请同学们通过程序设计的方法来解决以上问题，确定获奖分数线和总获奖人数。

输入格式
第一行为一个整数 n 表示参赛总人数。

第二行为 n 个整数，分别表示 n(1≤n≤100000) 个参赛同学的分数，所有分数都是在 0~100 之间的整数（含 0 和 100），每两个数之间用一个空格隔开。 

输出格式
输出为一行，包括两个整数，分别表示分数线和获奖人数（中间用一个空格隔开）。
 
//edition 1 冒泡排序 运行超时 
#include<iostream>
using namespace std;
int main()
{
	int n,i,j,k,temp,mid,grade;
	int count=0;
	cin>>n;
	int *a=new int[n];
	for(i=0;i<n;i++)
	{
		cin>>a[i];
	}
	for(i=0,j=n-1;i<n-1,j>0;i++,j--)
	{
		for(k=0;k<j;k++)
		{
			if(a[k+1]>a[k])   //成绩低的往后排 
			{
				temp=a[k];
				a[k]=a[k+1];
				a[k+1]=temp;
			}
		}
	}
	if(n%2==0) mid=n/2;
	else mid=(n+1)/2;
	grade=a[mid-1];
	for(i=0;i<n;i++)
	{
		if(a[i]>=grade)
		count++;
	}
	cout<<grade<<" "<<count<<endl;
} 
*/  
//edition 2 快速排序
#include<iostream>
using namespace std;
void QuickSort(int a[],int low,int high)
{
	if(low>=high) return;
	int temp,t;
	int i=low;
	int j=high+1;    //！！！注意是high+1 
	int base=a[low];
	while(1)
	{
		while(a[++i]<base)  //从左到右找比基准值大的值 
		{
			//if(i>=j) break;
			if(i==high) break;
		}
		while(a[--j]>base)
		{
			//if(i>=j) break;
			if(j==low) break;
		}
		if(i<j)
		{
			temp=a[i];
			a[i]=a[j];
			a[j]=temp;
		}
		else break;
	}
	//t=a[i];
	//a[i]=a[low];
	//a[low]=t;
	//QuickSort(a,low,i--);
	//QuickSort(a,i++,high);	
	t=a[j];     //why??? 
	a[j]=a[low];
	a[low]=t; 
	QuickSort(a,low,j-1);
	QuickSort(a,j+1,high);
}
int main()
{
	int n,i,j,k,temp,mid,grade;
	int count=0;
	cin>>n;
	int *a=new int[n];
	for(i=0;i<n;i++)
	{
		cin>>a[i];
	}
	QuickSort(a,0,n-1);     //！！！注意是n-1 
	if(n%2==0) mid=n/2;
	else mid=(n+1)/2;
	grade=a[mid-1];
	for(i=0;i<n;i++)
	{
		cout<<a[i]<<" "; 
		if(a[i]>=grade)
		count++;
	}
	cout<<grade<<" "<<count<<endl;
} 
